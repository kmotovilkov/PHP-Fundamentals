Exercises: Advanced Arrays


1.	Train
On the first line you will be given a list of wagons (integers). Each integer represents the number of passengers that are currently in each wagon. On the next line you will get the max capacity of each wagon (single integer). Until you receive "end" you will be given two types of input:
•	Add {passengers} – add a wagon to the end with the given number of passengers.
•	{passengers} -  find an existing wagon to fit all the passengers (starting from the first wagon)
At the end print the final state of the train (all the wagons separated by a space)
Example
Input	Output
32 54 21 12 4 0 23
75
Add 10
Add 0
30
10
75
end	72 54 21 12 4 75 23 10 0
0 0 0 10 2 4
10
Add 10
10
10
10
8
6
end	10 10 10 10 10 10 10



2.	Change Array
Write a program, which reads an array of integers from the console and receives commands, which manipulate the array. Your program may receive the following commands: 
•	Delete {element} – delete all elements in the array, which are equal to the given element
•	Insert {element} {position} – insert element and the given position
You should stop the program when you receive the command Odd or Even. If you receive Odd  print all odd numbers in the array separated with single whitespace, otherwise print the even numbers.
 
Examples
Input	Output
1 2 3 4 5 5 5 6
Delete 5
Insert 10 1
Delete 5
Odd	1 3
20 12 4 319 21 31234 2 41 23 4
Insert 50 2
Insert 50 5
Delete 4
Even	20 12 50 50 31234 2



3.	House Party
Write a program that keeps track of a guests that are going to a house party. On the first input line you are going to receive how many commands you are going to have. On the next lines you are going to receive some of the following inputs:
"{name} is going!"
"{name} is not going!"
If you receive the first type of input, you have to add the person if he/she is not in the list (If he/she is in the list print on the console: "{name} is already in the list!"). If you receive the second type of input, you have to remove the person if he/she is in the list (if not print: "{name} is not in the list!"). At the end print each guest on a new line.
Examples
Input	Output
4
Allie is going!
George is going!
John is not going!
George is not going!
	John is not in the list!
Allie
5
Tom is going!
Annie is going!
Tom is going!
Garry is going!
Jerry is going!	Tom is already in the list!
Tom
Annie
Garry
Jerry



4.	Array Advanced Operations
You will be given an array of integer numbers on the first input line. Until you receive "End" you will be given operations you have to apply on the array. The possible commands are:
•	Add {number} - add number at the end
•	Insert {number} {index} - insert number at given index
•	Remove {index} - remove at index
•	Shift left {count} - first number becomes last – count times
•	Shift right {count} - last number becomes first - count times
Note: it is possible that the index given is outside of the bounds of the array.
In that case print "Invalid index"
Examples
Input	Output
1 23 29 18 43 21 20 
Add 5
Remove 5
Shift left 3
Shift left 1
End 	43 20 5 1 23 29 18
5 12 42 95 32 1
Insert  3 0
Remove 10
Insert 8 6
Shift right 1
Shift left 2
End	Invalid index
5 12 42 95 32 8 1 3


5.	Bomb Numbers
Write a program that reads sequence of numbers and special bomb number with a certain power. Your task is to detonate every occurrence of the special bomb number and according to its power his neighbors from left and right. Detonations are performed from left to right and all detonated numbers disappear. Finally print the sum of the remaining elements in the sequence.
Examples
Input	Output	Comments
1 2 2 4 2 2 2 9
4 2	12	Special number is 4 with power 2. After detontaion we left with the sequence [1, 2, 9] with sum 12.
1 4 4 2 8 9 1
9 3	5	Special number is 9 with power 3. After detontaion we left with the sequence [1, 4] with sum 5. Since the 9 has only 1 neighbour from the right we remove just it (one number instead of 3).
1 7 7 1 2 3
7 1	6	Detonations are performed from left to right. We could not detonate the second occurance of 7 because its already destroyed by the first occurance. The numbers [1, 2, 3] survive. Their sum is 6.
1 1 2 1 1 1 2 1 1 1
2 1	4	The red and yellow numbers disappear in two sequential detonations. The result is the sequence [1, 1, 1, 1]. Sum = 4.

6.	Sum Reversed Numbers
Write a program that reads sequence of numbers, reverses their digits, and prints their sum.
Examples
Input	Output	Comments
123 234 12	774	321 + 432 + 21 = 774
12 12 34 84 66 12	220	21 + 21 + 43+ 48 + 66 + 21 = 220
120 1200 12000	63	21 + 21 + 21 = 63



7.	 *SoftUni Course Planning
You are tasked to help planning the next Programing Fundamentals course by keeping track of the lessons, that are going to be included in the course, as well as all the exercises for the lessons. 
On the first input line you will receive the initial schedule of lessons and exercises that are going to be part of the next course, separated by comma and space ", ". But before the course starts, there are some changes to be made. Until you receive "course start" you will be given some commands to modify the course schedule. The possible commands are: 
-	Add:{lessonTitle} – add the lesson to the end of the schedule, if it does not exist.
-	Insert:{lessonTitle}:{index} – insert the lesson to the given index, if it does not exist.
-	Remove:{lessonTitle} – remove the lesson, if it exists.
-	Swap:{lessonTitle}:{lessonTitle} – change the place of the two lessons, if they exist.
-	Exercise:{lessonTitle} – add Exercise in the schedule right after the lesson index, if the lesson exists and there is no exercise already, in the following format "{lessonTitle}-Exercise". If the lesson doesn`t exist, Add the lesson in the end of the course schedule, followed by the Exercise.
Each time you Swap or Remove a lesson, you should do the same with the Exercises, if there are any, which follow the lessons.
Input / Constraints
•	first line – the initial schedule lessons – strings, separated by comma and space ", "
•	until "course start" you will receive commands in the format described above
Output
•	Print the whole course schedule, each lesson on a new line with its number(index) in the schedule: 
"{lesson index}.{lessonTitle}"
•	Allowed working time / memory: 100ms / 16MB.
Examples
Input	Output	Comment
Data Types, Objects, Lists
Add:Databases
Insert:Arrays:0
Remove:Lists
course start	1.Arrays
2.Data Types
3.Objects
4.Databases
	We receive the initial schedule. 
Next, we add Databases lesson, because it doesn`t exist. 
We Insert at the given index lesson Arrays, because its not present in the schedule. 
After receiving the last command and removing lesson Lists, we print the whole schedule.
Input	Output	Comment
Arrays, Lists, Methods
Swap:Arrays:Methods
Exercise:Databases
Swap:Lists:Databases
Insert:Arrays:0
course start	1.Methods
2.Databases
3.Databases-Exercise
4.Arrays
5.Lists	We swap the given lessons, because both exist.
After receiving the Exercise command, we see that such lesson doesn`t exist, so we add the lesson at the end, followed by the exercise.
We swap Lists and Databases lessons, the
Databases-Exercise is also moved after the Databases lesson.
We skip the next command, because we already have such lesson in our schedule.

